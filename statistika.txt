In this article, we’ve introduced structural pattern matching in Python with the match case statement. We showed how it can provide an advantage over an if-elif-else statement in terms of the amount of code needed and the readability. There’s even more this new feature can do that we didn’t touch on here – you can provide an object as an input (instead of the strings we used) and do pattern matching on the attributes of the object. Pretty cool stuff.

A word of caution: for more complex statements like the final example above, the order in which you have the cases changes the behavior of the program. You might be familiar with this from writing if-elif-else statements. To demonstrate this problem, take the final example from above and swap the positions of the second and third cases. You’ll find the --ask flag is never matched. So, make sure you put a bit of thought into how you structure the case statements. You could even incorporate some of the other flow control statements into your code. Check out this article which shows HOW TO USE BREAK, CONTINUE, AND PASS TO CONTROL LOOPS IN PYTHON.

Strictly speaking, match case doesn’t add new functionality to Python. However, it does vastly simplify complex control statements. Feel free to take what you’ve learnt here and apply to your own projects. Try to re-write some of your if-elif-else statements with a match case statement to convince yourself of its usefulness. Happy coding!